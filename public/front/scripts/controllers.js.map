{"version":3,"sources":["dashboardControllers.js","bodyControllers.js","registerControllers.js","usersControllers.js","productsControllers.js","returnersControllers.js","orderProductsControllers.js","correctionsControllers.js","providersControllers.js","moneyReturnsControllers.js","codeGeneratorController.js"],"names":[],"mappingsxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrzjrxPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"controllers.js","sourcesContent":["interMap.controller('dashboardController', ['$scope', '$http', '$state', 'growl', function ($scope, $http, $state, growl) {\n        $scope.dashboard = {};\n\n        var url = '/api/dashboard/';\n\n        $http.get(url)\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.dashboard = response.data.dashboard;\n                    } else {\n                        growl.addErrorMessage(response.data.error);\n                    }\n                })\n                .finally(function () {\n                    $scope.isLoading = false;\n                });\n    }]);\n\ninterMap.controller('dashboardEditController', ['$scope', '$http', '$state', 'growl', function ($scope, $http, $state, growl) {\n        $scope.isLoading = true;\n\n        $scope.dashboard = {};\n\n        var url = '/api/dashboard/';\n\n        $http.get(url)\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.dashboard = response.data.dashboard;\n                    } else {\n                        growl.addErrorMessage(response.data.error);\n                    }\n                })\n                .finally(function () {\n                    $scope.isLoading = false;\n                });\n\n\n        $scope.cancel = function () {\n            $state.go('dashboard');\n        };\n\n        $scope.saveDashboard = function () {\n            $scope.isLoading = true;\n            $http.post(url, $scope.dashboard).\n                    success(function (data) {\n                        if (data.success) {\n                            $state.go('dashboard');\n                            growl.addSuccessMessage('Dashboard został zaktualizowany pomyślnie !');\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się zaktualizować dashboardu !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n    }]);\n","interMap.controller('bodyController', ['$scope', '$rootScope', '$http', '$state', '$location', 'growl', '$cookies',\n    function ($scope, $rootScope, $http, $state, $location, growl, $cookies) {\n        $rootScope.$state = $state;\n        $scope.admin = false;\n\n        var loginStatus = $cookies.getObject('logged');\n\n        if (angular.isDefined($rootScope.loggedUser) || loginStatus) {\n            if ($rootScope.loggedUser) {\n                $scope.loggedUser = true;\n            } else {\n                $rootScope.permissions = {};\n                $rootScope.permissions.user = loginStatus;\n                $scope.loggedUser = true;\n            }\n        } else {\n            $scope.loggedUser = false;\n            $state.go('login');\n        }\n\n        angular.extend($scope, {\n            logIn: function (loginForm) {\n                $http({\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    url: '/auth',\n                    method: 'POST',\n                    data: {\n                        email: $scope.login.username,\n                        password: $scope.login.password\n                    }\n                }).success(function (response) {\n                    if (response.success) {\n                        $rootScope.permissions = {};\n                        $rootScope.permissions.user = response.data;\n                        $rootScope.loggedUser = true;\n                        $scope.loggedUser = true;\n                        var expireDate = new Date();\n                        expireDate.setDate(expireDate.getDate() + 1);\n                        $cookies.putObject('logged', response.data, {'expires': expireDate});\n                        $state.go('dashboard');\n                        growl.addSuccessMessage('Witaj ' + response.data.name + '!');\n                    } else {\n                        growl.addErrorMessage(response.error);\n                    }\n                });\n            }\n        });\n\n        $scope.logout = function () {\n            $scope.loggedUser = false;\n            $rootScope.loggedUser = false;\n            $cookies.remove('logged');\n            $state.go('login');\n            growl.addErrorMessage('Zostałeś wylogowany ! Zapraszamy ponownie !');\n        }\n\n        $scope.register = function () {\n            $state.go('register');\n        }\n\n        $scope.isActive = function (state, menuState) {\n            var menuActive = state.current.menuActive;\n            return state.current.name == menuState || (angular.isDefined(menuActive) && menuActive == menuState);\n        };\n\n        $scope.adminMenu = function () {\n            $scope.admin = !$scope.admin;\n        }\n    }]);\n\n","interMap.controller('registerController', ['$scope', '$rootScope', '$http', '$state', 'growl', function ($scope, $rootScope, $http, $state, growl) {\n        angular.extend($scope, {\n            registerIn: function (registerForm) {\n                $http({\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    url: '/register',\n                    method: 'POST',\n                    data:  $scope.user\n                }).success(function (response) {\n                    if (response.success) {\n                        $state.go('login');\n                        growl.addSuccessMessage('Rejestracja przebiegła pomyślnie !');\n                    } else {\n                        $scope.error = response.error;\n                    }\n                });\n            }\n        });\n    }]);\n","interMap.controller('usersController', ['$scope', '$rootScope', '$http', '$state', 'growl', function ($scope, $rootScope, $http, $state, growl) {\n\n        var url = '/api/user/';\n\n        $scope.getUsers = function () {\n            return $http.get(url);\n        };\n\n        $scope.removeUser = function (id) {\n            return $http.delete(url + id);\n        }\n\n        $scope.getUsers()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.users = response.data.data;\n                    }\n                });\n\n        $scope.removeUsers = function (id) {\n            $scope.removeUser(id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.users, function (val, key) {\n                                if (val.id == id) {\n                                    $scope.users.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Użytkownik został usunięty !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n        $scope.editUser = function (id) {\n            var params = {};\n            params.userId = id;\n            $state.go('editUser', params);\n        };\n\n        $scope.addUser = function () {\n            $state.go('newUser');\n        };\n\n    }]);\n\ninterMap.controller('userController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', function ($scope, $stateParams, $rootScope, $http, $state, growl) {\n\n        if (angular.isDefined($stateParams.userId)) {\n            $scope.userId = $stateParams.userId;\n        }\n\n        $scope.editMode = false;\n        $scope.user = {};\n        $scope.roles = ['user', 'viewer', 'moderator', 'admin'];\n\n        var url = '/api/user/';\n\n        if (angular.isDefined($scope.userId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.userId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.user = response.data.user;\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    });\n        }\n\n        $scope.cancel = function () {\n            $state.go('users');\n        };\n\n        $scope.saveUser = function (user, editMode) {\n            if (editMode) {\n                return $http.put(url + $scope.user.id, user)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Użytkownik został zaktualizowany !');\n                                $state.go('users');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            } else {\n                return $http.post(url, user)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                growl.addSuccessMessage('Użytkownik został dodany !');\n                                $state.go('users');\n                            } else {\n                                $scope.error = response.data.error;\n                            }\n                        });\n            }\n        };\n\n        $scope.passMismatched = function () {\n            if (angular.isDefined($scope.userForm)) {\n                return $scope.userForm.password_confirmation.$error.match;\n            }\n        };\n\n    }]);\n","interMap.controller('productsListController', ['$scope', '$rootScope', '$http', '$state', 'growl', '$uibModal', '$filter',\n    function ($scope, $rootScope, $http, $state, growl, $uibModal, $filter) {\n\n        $scope.sortType = 'created_at';\n        $scope.sortReverse = true;\n\n        var url = '/api/product/';\n\n        $scope.statuses = [\n            'niezrealizowane',\n            'zrealizowane'\n        ];\n\n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n        };\n\n        $rootScope.showButtonBar = false;\n\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n\n        $scope.getProducts = function (sortParam, findParams) {\n            return $http.get(url, {params: {sort: sortParam, find: findParams}});\n        };\n\n        $scope.search = {};\n\n        $scope.searchProducts = function (search) {\n            var find = angular.copy(search);\n            if (angular.isDefined(find.date)) {\n                find.date = $filter('date')(find.date, 'yyyy-MM-dd');\n            }\n            $scope.getProducts($scope.sort, find)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.products = response.data.data;\n                            $scope.isFind = false;\n                        }\n                    });\n        };\n\n        $scope.clearSearch = function () {\n            delete $scope.search.name;\n            delete $scope.search.person;\n            delete $scope.search.date;\n            $scope.search = {};\n            $scope.getProducts($scope.sort)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.products = response.data.data;\n                        }\n                    });\n        };\n\n        $scope.$watch('search', function (newValue, oldValue) {\n            $scope.check = false;\n            if (angular.isDefined($scope.search.name)\n                    || angular.isDefined($scope.search.person)\n                    || angular.isDefined($scope.search.date)) {\n                $scope.check = true;\n            } else {\n                $scope.check = false;\n            }\n        }, true);\n\n        $scope.getProducts()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.products = response.data.data;\n                        $scope.sort = 'name';\n                    }\n                });\n\n        $scope.addProduct = function () {\n            var modalInstance = $uibModal.open({\n                backdrop: 'static',\n                templateUrl: '/front/views/products-list/components/modal/product.tpl.html',\n                controller: 'productModalController',\n                resolve: {\n                    product: function () {\n                        return {\n                        };\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                $state.go($state.current, {}, {reload: true});\n                growl.addSuccessMessage('Produkt został dodany pomyślnie !');\n            });\n        };\n\n        $scope.$watch('sort', function (newVal, oldVal) {\n            if (angular.isDefined(oldVal) && angular.isDefined(newVal) && newVal != oldVal) {\n                $scope.getProducts(newVal)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                $scope.products = response.data.data;\n                            }\n                        });\n            }\n        });\n\n        $scope.removeProduct = function (id) {\n            $http.delete(url + id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.products, function (val, key) {\n                                if (val.id == id) {\n                                    $scope.products.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Produkt został usunięty !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n    }]);\n\ninterMap.controller('productPageController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', '$uibModal', function ($scope, $stateParams, $rootScope, $http, $state, growl, $uibModal) {\n\n        if (angular.isDefined($stateParams.productId)) {\n            $scope.productId = $stateParams.productId;\n        }\n\n        $scope.statuses = [\n            {\n                id: 1,\n                name: 'niezrealizowane'\n            },\n            {\n                id: 2,\n                name: 'zrealizowane'\n            }\n        ];\n\n        $scope.isLoading = true;\n\n        $scope.product = {};\n\n        var url = '/api/product/';\n\n        if (angular.isDefined($scope.productId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.productId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.product = response.data.product;\n                            if ($scope.product.status == 1) {\n                                $scope.product.status = $scope.statuses[0];\n                            } else {\n                                $scope.product.status = $scope.statuses[1];\n                            }\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    })\n                    .finally(function () {\n                        $scope.isLoading = false;\n                    });\n        }\n\n\n        $scope.cancel = function () {\n            $state.go('productsList');\n        };\n\n        $scope.saveProduct = function () {\n            $scope.isLoading = true;\n            $scope.product.editor = $rootScope.permissions.user.name;\n            $http.put(url + $scope.product.id, $scope.product).\n                    success(function (data) {\n                        if (data.success) {\n                            $state.go('productsList');\n                            growl.addSuccessMessage('Produkt został zaktualizowany pomyślnie !');\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się zaktualizować produktu !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n    }]);\n\ninterMap.controller('productModalController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', 'product', '$uibModalInstance', function ($scope, $stateParams, $rootScope, $http, $state, growl, product, $uibModalInstance) {\n\n        $scope.product = {};\n\n        $scope.statuses = [\n            {\n                id: 1,\n                name: 'niezrealizowane'\n            },\n            {\n                id: 2,\n                name: 'zrealizowane'\n            }\n        ];\n\n        $scope.product.status = $scope.statuses[0];\n        $scope.product.person = $rootScope.permissions.user.name;\n\n        if (angular.isDefined(product.name)) {\n            $scope.productId = product.id;\n            $scope.product = product;\n        }\n\n        var url = '/api/product/';\n\n        $scope.save = function () {\n            $scope.isLoading = true;\n            $http.post(url, $scope.product).\n                    success(function (data) {\n                        if (data.success) {\n                            $uibModalInstance.close(data.product);\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się dodać produktu !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n    }]);","interMap.controller('returnsListController', ['$scope', '$rootScope', '$http', '$state', 'growl', '$uibModal', '$filter',\n    function ($scope, $rootScope, $http, $state, growl, $uibModal, $filter) {\n\n        $scope.sortType = 'id';\n        $scope.sortReverse = true;\n\n        var url = '/api/orders/';\n\n        $scope.statuses = [\n            'niezrealizowane',\n            'zrealizowane'\n        ];\n\n        $scope.search = {};\n        $scope.companies = ['Podlasiak', 'Fonti', 'Wszystkie'];\n        $scope.search.company = $scope.companies[2];\n\n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n        };\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n        $scope.getOrders = function (sortParam, findParams) {\n            return $http.get(url, {params: {sort: sortParam, find: findParams}});\n        };\n\n        $scope.searchOrders = function (search) {\n            var find = angular.copy(search);\n            if (angular.isDefined(find.date)) {\n                find.date = $filter('date')(find.date, 'yyyy-MM-dd');\n            }\n            $scope.getOrders($scope.sort, find)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.returners = response.data.data;\n                            $scope.isFind = false;\n                        }\n                    });\n        };\n\n        $scope.clearSearch = function () {\n            delete $scope.search.name;\n            delete $scope.search.person;\n            delete $scope.search.date;\n            delete $scope.search.sender;\n            delete $scope.search.number;\n            delete $scope.search.document;\n            $scope.search = {};\n            $scope.search.company = $scope.companies[2];\n            $scope.getOrders($scope.sort)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.returners = response.data.data;\n                        }\n                    });\n        };\n\n        $scope.$watch('search', function (newValue, oldValue) {\n            $scope.check = false;\n            if (angular.isDefined($scope.search.name)\n                    || angular.isDefined($scope.search.person)\n                    || angular.isDefined($scope.search.sender)\n                    || angular.isDefined($scope.search.number)\n                    || angular.isDefined($scope.search.company)\n                    || angular.isDefined($scope.search.document)\n                    || angular.isDefined($scope.search.date)) {\n                $scope.check = true;\n            } else {\n                $scope.check = false;\n            }\n        }, true);\n\n        $scope.getOrders()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.returners = response.data.data;\n                        $scope.sort = 'name';\n                    }\n                });\n\n        $scope.addOrder = function () {\n            var modalInstance = $uibModal.open({\n                backdrop: 'static',\n                templateUrl: '/front/views/returns-list/components/modal/return.tpl.html',\n                controller: 'returnModalController',\n                resolve: {\n                    order: function () {\n                        return {\n                        };\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                $state.go($state.current, {}, {reload: true});\n                growl.addSuccessMessage('Protokół zwrotu został dodany pomyślnie !');\n            });\n        };\n\n        $scope.$watch('sort', function (newVal, oldVal) {\n            if (angular.isDefined(oldVal) && angular.isDefined(newVal) && newVal != oldVal) {\n                $scope.getOrders(newVal)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                $scope.returners = response.data.data;\n                            }\n                        });\n            }\n        });\n\n        $scope.removeOrder = function (id) {\n            $http.delete(url + id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.returners, function (val, key) {\n                                if (val.id == id) {\n                                    $scope.returners.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Protokół zwrotu został usunięty !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n    }]);\n\ninterMap.controller('returnPageController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', '$uibModal', function ($scope, $stateParams, $rootScope, $http, $state, growl, $uibModal) {\n\n        if (angular.isDefined($stateParams.returnId)) {\n            $scope.returnId = $stateParams.returnId;\n        }\n\n        $scope.statuses = [\n            {\n                id: 1,\n                name: 'niezrealizowane'\n            },\n            {\n                id: 2,\n                name: 'zrealizowane'\n            }\n        ];\n\n        $scope.companies = [\n            'Podlasiak',\n            'Fonti'\n        ];\n\n        $scope.isLoading = true;\n\n        $scope.order = {};\n\n        var url = '/api/orders/';\n\n        if (angular.isDefined($scope.returnId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.returnId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.order = response.data.order;\n                            if (angular.isDefined($scope.order.date)) {\n                                $scope.order.date = new Date($scope.order.date);\n                            } else {\n                                $scope.order.date = new Date();\n                            }\n                            if (angular.isDefined($scope.order.created_at)) {\n                                $scope.order.created_at = new Date($scope.order.created_at);\n                            } else {\n                                $scope.order.created_at = new Date();\n                            }\n                            if ($scope.order.status == 1) {\n                                $scope.order.status = $scope.statuses[0];\n                            } else {\n                                $scope.order.status = $scope.statuses[1];\n                            }\n                            $scope.order.authoriser = $rootScope.permissions.user.name;\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    })\n                    .finally(function () {\n                        $scope.isLoading = false;\n                    });\n        }\n\n\n        $scope.cancel = function () {\n            $state.go('returnsList');\n        };\n\n        $scope.saveOrder = function () {\n            $scope.isLoading = true;\n            $scope.order.editor = $rootScope.permissions.user.name;\n            $http.put(url + $scope.order.id, $scope.order).\n                    success(function (data) {\n                        if (data.success) {\n                            $state.go('returnsList');\n                            growl.addSuccessMessage('Protokół zwrotu został zaktualizowany pomyślnie !');\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się zaktualizować protokołu zwrotu !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n        };\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n    }]);\n\ninterMap.controller('returnModalController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', 'order', '$uibModalInstance', function ($scope, $stateParams, $rootScope, $http, $state, growl, order, $uibModalInstance) {\n\n        $scope.order = {};\n\n        $scope.companies = [\n            'Podlasiak',\n            'Fonti'\n        ];\n\n        if (angular.isDefined(order.name)) {\n            $scope.orderId = order.id;\n            $scope.order = order;\n        }\n        $scope.order.created_at = new Date();\n        $scope.order.company = $scope.companies[0];\n\n        var url = '/api/orders/';\n\n        $scope.save = function () {\n            $scope.isLoading = true;\n            $http.post(url, $scope.order).\n                    success(function (data) {\n                        if (data.success) {\n                            $uibModalInstance.close(data.order);\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się dodać protokołu zwrotu !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n            startDate: new Date()\n        };\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n    }]);","interMap.controller('orderProductsListController', ['$scope', '$rootScope', '$http', '$state', 'growl', '$uibModal', '$filter', '$stateParams',\n    function ($scope, $rootScope, $http, $state, growl, $uibModal, $filter, $stateParams) {\n\n        $scope.sortType = 'id';\n        $scope.sortReverse = true;\n\n        if (angular.isDefined($stateParams.returnId)) {\n            $scope.orderId = $stateParams.returnId;\n        }\n\n        var url = '/api/order-products/';\n\n        $http.get('/api/orders/' + $scope.orderId)\n                .then(function (response) {\n                    $scope.order = response.data.order;\n                });\n\n        $scope.getProducts = function (orderId, sortParam, findParams) {\n            return $http.get(url, {params: {sort: sortParam, find: findParams, order_id: orderId}});\n        };\n\n        $scope.getProducts($scope.orderId)\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.products = response.data.data;\n                        $scope.sort = 'name';\n                    }\n                });\n\n        $scope.addProduct = function () {\n            var modalInstance = $uibModal.open({\n                backdrop: 'static',\n                templateUrl: '/front/views/returns-list/components/modal/product.tpl.html',\n                controller: 'orderProductModalController',\n                resolve: {\n                    product: function () {\n                        return {\n                            order_id: $scope.orderId\n                        };\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                $state.go($state.current, {}, {reload: true});\n                growl.addSuccessMessage('Przesyłka została dodana pomyślnie !');\n            });\n        };\n\n        $scope.removeProduct = function (id) {\n            $http.delete(url + id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.products, function (val, key) {\n                                if (val.id == id) {\n                                    $scope.products.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Przesyłka została usunięta !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n        $scope.cancel = function () {\n            $state.go('returnsList');\n        };\n\n    }]);\n\ninterMap.controller('orderProductPageController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', '$uibModal', function ($scope, $stateParams, $rootScope, $http, $state, growl, $uibModal) {\n\n        if (angular.isDefined($stateParams.productId)) {\n            $scope.productId = $stateParams.productId;\n        }\n\n        $scope.statuses = ['OK', 'S', 'ZN'];\n\n        $scope.isLoading = true;\n\n        $scope.product = {};\n\n        var url = '/api/order-products/';\n\n        if (angular.isDefined($scope.productId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.productId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.product = response.data.product;\n                            if (angular.isDefinedNotNull($scope.product.date)) {\n                                $scope.product.date = new Date($scope.product.date);\n                            } else {\n                                $scope.product.date = null;\n                            }\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    })\n                    .finally(function () {\n                        $scope.isLoading = false;\n                    });\n        }\n\n\n        $scope.cancel = function () {\n            $state.go('orderProductsList', {returnId: $scope.product.order_id});\n        };\n\n        $scope.saveProduct = function () {\n            $scope.isLoading = true;\n            $scope.product.editor = $rootScope.permissions.user.name;\n            $http.put(url + $scope.product.id, $scope.product).\n                    success(function (data) {\n                        if (data.success) {\n                            $state.go('orderProductsList', {returnId: $scope.product.order_id});\n                            growl.addSuccessMessage('Przesyłka została zaktualizowana pomyślnie !');\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się zaktualizować przesyłki!');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n            startDate: new Date()\n        };\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n    }]);\n\ninterMap.controller('orderProductModalController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', 'product', '$uibModalInstance', function ($scope, $stateParams, $rootScope, $http, $state, growl, product, $uibModalInstance) {\n\n        $scope.product = {};\n\n        $scope.product = product;\n        $scope.product.country = 'PL';\n\n        var url = '/api/order-products/';\n\n        $scope.statuses = ['OK', 'S', 'ZN'];\n\n        $scope.save = function () {\n            $scope.isLoading = true;\n            $http.post(url, $scope.product).\n                    success(function (data) {\n                        if (data.success) {\n                            $uibModalInstance.close(data.product);\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się dodać przesyłki!');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n    }]);","interMap.controller('correctionsListController', ['$scope', '$rootScope', '$http', '$state', 'growl', '$uibModal', '$filter',\n    function ($scope, $rootScope, $http, $state, growl, $uibModal, $filter) {\n\n        $scope.sortType = 'created_at';\n        $scope.sortReverse = true;\n\n        var url = '/api/correction/';\n\n        $scope.statuses = [\n            'niezrealizowane',\n            'zrealizowane'\n        ];\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n\n        $scope.getCorrections = function (sortParam, findParams) {\n            return $http.get(url, {params: {sort: sortParam, find: findParams}});\n        };\n\n        $scope.search = {};\n\n        $scope.searchCorrections = function (search) {\n            var find = angular.copy(search);\n            if (angular.isDefined(find.date)) {\n                find.date = $filter('date')(find.date, 'yyyy-MM-dd');\n            }\n            $scope.getCorrections($scope.sort, find)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.corrections = response.data.data;\n                            $scope.isFind = false;\n                        }\n                    });\n        };\n\n        $scope.clearSearch = function () {\n            delete $scope.search.name;\n            delete $scope.search.date;\n            $scope.search = {};\n            $scope.getCorrections($scope.sort)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.corrections = response.data.data;\n                        }\n                    });\n        };\n\n        $scope.$watch('search', function (newValue, oldValue) {\n            $scope.check = false;\n            if (angular.isDefined($scope.search.name)\n                    || angular.isDefined($scope.search.date)) {\n                $scope.check = true;\n            } else {\n                $scope.check = false;\n            }\n        }, true);\n\n        $scope.getCorrections()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.corrections = response.data.data;\n                        $scope.sort = 'name';\n                    }\n                });\n\n        $scope.addCorrection = function () {\n            var modalInstance = $uibModal.open({\n                backdrop: 'static',\n                templateUrl: '/front/views/corrections/components/modal/correction.tpl.html',\n                controller: 'correctionModalController',\n                resolve: {\n                    correction: function () {\n                        return {\n                        };\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                $state.go($state.current, {}, {reload: true});\n                growl.addSuccessMessage('Poprawka została dodana pomyślnie !');\n            });\n        };\n\n        $scope.$watch('sort', function (newVal, oldVal) {\n            if (angular.isDefined(oldVal) && angular.isDefined(newVal) && newVal != oldVal) {\n                $scope.getCorrections(newVal)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                $scope.corrections = response.data.data;\n                            }\n                        });\n            }\n        });\n\n        $scope.removeCorrection = function (id) {\n            $http.delete(url + id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.corrections, function (val, key) {\n                                if (val.id == id) {\n                                    $scope.corrections.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Poprawka została usunięta !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n    }]);\n\ninterMap.controller('correctionPageController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', '$uibModal', function ($scope, $stateParams, $rootScope, $http, $state, growl, $uibModal) {\n\n        if (angular.isDefined($stateParams.correctionId)) {\n            $scope.correctionId = $stateParams.correctionId;\n        }\n\n        $scope.statuses = [\n            {\n                id: 1,\n                name: 'niezrealizowane'\n            },\n            {\n                id: 2,\n                name: 'zrealizowane'\n            }\n        ];\n\n        $scope.isLoading = true;\n\n        $scope.correction = {};\n\n        var url = '/api/correction/';\n\n        if (angular.isDefined($scope.correctionId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.correctionId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.correction = response.data.correction;\n                            if (angular.isDefinedNotNull($scope.correction.date)) {\n                                $scope.correction.date = new Date($scope.correction.date);\n                            } else {\n                                $scope.correction.date = null;\n                            }\n                            if ($scope.correction.status == 1) {\n                                $scope.correction.status = $scope.statuses[0];\n                            } else {\n                                $scope.correction.status = $scope.statuses[1];\n                            }\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    })\n                    .finally(function () {\n                        $scope.isLoading = false;\n                    });\n        }\n\n\n        $scope.cancel = function () {\n            $state.go('correctionsList');\n        };\n\n        $scope.saveCorrection = function () {\n            $scope.isLoading = true;\n            $http.put(url + $scope.correction.id, $scope.correction).\n                    success(function (data) {\n                        if (data.success) {\n                            $state.go('correctionsList');\n                            growl.addSuccessMessage('Poprawka została zaktualizowana pomyślnie !');\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się zaktualizować poprawki !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n    }]);\n\ninterMap.controller('correctionModalController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', 'correction', '$uibModalInstance', function ($scope, $stateParams, $rootScope, $http, $state, growl, product, $uibModalInstance) {\n\n        $scope.correction = {};\n\n        $scope.statuses = [\n            {\n                id: 1,\n                name: 'niezrealizowane'\n            },\n            {\n                id: 2,\n                name: 'zrealizowane'\n            }\n        ];\n\n        $scope.correction.status = $scope.statuses[0];\n\n        var url = '/api/correction/';\n\n        $scope.save = function () {\n            $scope.isLoading = true;\n            $scope.correction.adder = $rootScope.permissions.user.name;\n            $http.post(url, $scope.correction).\n                    success(function (data) {\n                        if (data.success) {\n                            $uibModalInstance.close(data.correction);\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się dodać poprawki !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n    }]);","interMap.controller('providersListController', ['$scope', '$rootScope', '$http', '$state', 'growl', '$uibModal', '$filter',\n    function ($scope, $rootScope, $http, $state, growl, $uibModal, $filter) {\n\n        $scope.sortType = 'created_at';\n        $scope.sortReverse = true;\n\n        var url = '/api/provider/';\n\n        $scope.statuses = [\n            'niezrealizowane',\n            'zrealizowane'\n        ];\n\n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n        };\n\n        $rootScope.showButtonBar = false;\n\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n\n        $scope.getProviders = function (sortParam, findParams) {\n            return $http.get(url, {params: {sort: sortParam, find: findParams}});\n        };\n\n        $scope.search = {};\n\n        $scope.searchProviders = function (search) {\n            var find = angular.copy(search);\n            if (angular.isDefined(find.date)) {\n                find.date = $filter('date')(find.date, 'yyyy-MM-dd');\n            }\n            $scope.getProviders($scope.sort, find)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.providers = response.data.data;\n                            $scope.isFind = false;\n                        }\n                    });\n        };\n\n        $scope.clearSearch = function () {\n            delete $scope.search.name;\n            delete $scope.search.date;\n            $scope.search = {};\n            $scope.getProviders($scope.sort)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.providers = response.data.data;\n                        }\n                    });\n        };\n\n        $scope.$watch('search', function (newValue, oldValue) {\n            $scope.check = false;\n            if (angular.isDefined($scope.search.name)\n                    || angular.isDefined($scope.search.date)) {\n                $scope.check = true;\n            } else {\n                $scope.check = false;\n            }\n        }, true);\n\n        $scope.getProviders()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.providers = response.data.data;\n                        $scope.sort = 'name';\n                    }\n                });\n\n        $scope.addProvider = function () {\n            var modalInstance = $uibModal.open({\n                backdrop: 'static',\n                templateUrl: '/front/views/providers/components/modal/provider.tpl.html',\n                controller: 'providerModalController',\n                resolve: {\n                    provider: function () {\n                        return {\n                        };\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                $state.go($state.current, {}, {reload: true});\n                growl.addSuccessMessage('Dostawa została dodana pomyślnie !');\n            });\n        };\n\n        $scope.$watch('sort', function (newVal, oldVal) {\n            if (angular.isDefined(oldVal) && angular.isDefined(newVal) && newVal != oldVal) {\n                $scope.getProviders(newVal)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                $scope.providers = response.data.data;\n                            }\n                        });\n            }\n        });\n\n        $scope.removeProvider = function (id) {\n            $http.delete(url + id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.providers, function (val, key) {\n                                if (val.id == id) {\n                                    $scope.providers.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Dostawa została usunięta !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n    }]);\n\ninterMap.controller('providerPageController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', '$uibModal', function ($scope, $stateParams, $rootScope, $http, $state, growl, $uibModal) {\n\n        if (angular.isDefined($stateParams.providerId)) {\n            $scope.providerId = $stateParams.providerId;\n        }\n\n        $scope.statuses = [\n            {\n                id: 1,\n                name: 'niezrealizowane'\n            },\n            {\n                id: 2,\n                name: 'zrealizowane'\n            }\n        ];\n\n        $scope.isLoading = true;\n\n        $scope.provider = {};\n\n        var url = '/api/provider/';\n\n        if (angular.isDefined($scope.providerId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.providerId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.provider = response.data.provider;\n                            if (angular.isDefinedNotNull($scope.provider.date)) {\n                                $scope.provider.date = new Date($scope.provider.date);\n                            } else {\n                                $scope.provider.date = null;\n                            }\n                            if ($scope.provider.status == 1) {\n                                $scope.provider.status = $scope.statuses[0];\n                            } else {\n                                $scope.provider.status = $scope.statuses[1];\n                            }\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    })\n                    .finally(function () {\n                        $scope.isLoading = false;\n                    });\n        }\n\n\n        $scope.cancel = function () {\n            $state.go('providersList');\n        };\n\n        $scope.saveProvider = function () {\n            $scope.isLoading = true;\n            $http.put(url + $scope.provider.id, $scope.provider).\n                    success(function (data) {\n                        if (data.success) {\n                            $state.go('providersList');\n                            growl.addSuccessMessage('Dostawa została zaktualizowana pomyślnie !');\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się zaktualizować dostawy !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n        \n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n            startDate: new Date()\n        };\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n    }]);\n\ninterMap.controller('providerModalController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', 'provider', '$uibModalInstance', function ($scope, $stateParams, $rootScope, $http, $state, growl, product, $uibModalInstance) {\n\n        $scope.provider = {};\n\n        $scope.statuses = [\n            {\n                id: 1,\n                name: 'niezrealizowane'\n            },\n            {\n                id: 2,\n                name: 'zrealizowane'\n            }\n        ];\n\n        $scope.provider.status = $scope.statuses[0];\n\n        var url = '/api/provider/';\n\n        $scope.save = function () {\n            $scope.isLoading = true;\n            $http.post(url, $scope.provider).\n                    success(function (data) {\n                        if (data.success) {\n                            $uibModalInstance.close(data.provider);\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się dodać dostawy !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n        \n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n            startDate: new Date()\n        };\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n    }]);","interMap.controller('moneyReturnsListController', ['$scope', '$rootScope', '$http', '$state', 'growl', '$uibModal', '$filter',\n    function ($scope, $rootScope, $http, $state, growl, $uibModal, $filter) {\n\n        $scope.sortType = 'created_at';\n        $scope.sortReverse = true;\n\n        var url = '/api/money-returns/';\n\n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n        };\n\n        $rootScope.showButtonBar = false;\n\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n\n        $scope.getMoneyReturns = function (sortParam, findParams) {\n            return $http.get(url, {params: {sort: sortParam, find: findParams}});\n        };\n\n        $scope.search = {};\n\n        $scope.searchMoneyReturns = function (search) {\n            var find = angular.copy(search);\n            if (angular.isDefined(find.date)) {\n                find.date = $filter('date')(find.date, 'yyyy-MM-dd');\n            }\n            $scope.getMoneyReturns($scope.sort, find)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.moneyReturns = response.data.data;\n                            $scope.isFind = false;\n                        }\n                    });\n        };\n\n        $scope.clearSearch = function () {\n            delete $scope.search.person;\n            delete $scope.search.subiect;\n            delete $scope.search.date;\n            delete $scope.search.cost;\n            $scope.search = {};\n            $scope.getMoneyReturns($scope.sort)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.moneyReturns = response.data.data;\n                        }\n                    });\n        };\n\n        $scope.$watch('search', function (newValue, oldValue) {\n            $scope.check = false;\n            if (angular.isDefined($scope.search.subiect)\n                    || angular.isDefined($scope.search.person)\n                    || angular.isDefined($scope.search.cost)\n                    || angular.isDefined($scope.search.date)) {\n                $scope.check = true;\n            } else {\n                $scope.check = false;\n            }\n        }, true);\n\n        $scope.getMoneyReturns()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.moneyReturns = response.data.data;\n                        $scope.sort = 'updated_at';\n                    }\n                });\n\n        $scope.addMoneyReturn = function () {\n            var modalInstance = $uibModal.open({\n                backdrop: 'static',\n                templateUrl: '/front/views/money-returns/components/modal/return.tpl.html',\n                controller: 'moneyReturnModalController',\n                resolve: {\n                    moneyReturn: function () {\n                        return {\n                        };\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                $state.go($state.current, {}, {reload: true});\n                growl.addSuccessMessage('Zwrot pieniędzy został dodany pomyślnie !');\n            });\n        };\n\n        $scope.$watch('sort', function (newVal, oldVal) {\n            if (angular.isDefined(oldVal) && angular.isDefined(newVal) && newVal != oldVal) {\n                $scope.getMoneyReturns(newVal)\n                        .then(function (response) {\n                            if (response.data.success) {\n                                $scope.moneyReturns = response.data.data;\n                            }\n                        });\n            }\n        });\n\n        $scope.removeMoneyReturn = function (id) {\n            $http.delete(url + id).\n                    success(function (data) {\n                        if (data.success) {\n                            angular.forEach($scope.moneyReturns, function (val, key) {\n                                if (val.id == id) {\n                                    $scope.moneyReturns.splice(key, 1);\n                                }\n                            });\n                            growl.addSuccessMessage('Zwrot pieniędzy został usunięty !');\n                        } else if (data.error) {\n                            growl.addErrorMessage(data.error);\n                        }\n                    });\n        };\n\n    }]);\n\ninterMap.controller('moneyReturnPageController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', '$uibModal', function ($scope, $stateParams, $rootScope, $http, $state, growl, $uibModal) {\n\n        if (angular.isDefined($stateParams.returnId)) {\n            $scope.returnId = $stateParams.returnId;\n        }\n\n        $scope.isLoading = true;\n\n        $scope.moneyReturn = {};\n        $scope.moneyReturn.time = new Date();\n\n        var url = '/api/money-returns/';\n\n        if (angular.isDefined($scope.returnId)) {\n            $scope.editMode = true;\n\n            $http.get(url + $scope.returnId)\n                    .then(function (response) {\n                        if (response.data.success) {\n                            $scope.moneyReturn = response.data.data;\n                            if (angular.isDefined($scope.moneyReturn.date)) {\n                                $scope.moneyReturn.date = new Date($scope.moneyReturn.date);\n                                $scope.moneyReturn.time = new Date($scope.moneyReturn.time);\n                            } else {\n                                $scope.moneyReturn.date = new Date();\n                            }\n                        } else {\n                            growl.addErrorMessage(response.data.error);\n                        }\n                    })\n                    .finally(function () {\n                        $scope.isLoading = false;\n                    });\n        }\n\n        $scope.cancel = function () {\n            $state.go('moneyReturns');\n        };\n\n        $scope.saveMoneyReturn = function () {\n            $scope.isLoading = true;\n            $http.put(url + $scope.moneyReturn.id, $scope.moneyReturn).\n                    success(function (data) {\n                        if (data.success) {\n                            $state.go('moneyReturns');\n                            growl.addSuccessMessage('Zwrot pieniędzy został zaktualizowany pomyślnie !');\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się zaktualizować zwrotu pieniędzy !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n        };\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n    }]);\n\ninterMap.controller('moneyReturnModalController', ['$scope', '$stateParams', '$rootScope', '$http', '$state', 'growl', 'moneyReturn', '$uibModalInstance', function ($scope, $stateParams, $rootScope, $http, $state, growl, moneyReturn, $uibModalInstance) {\n\n        $scope.moneyReturn = {};\n        $scope.moneyReturn.time = new Date();\n        $scope.moneyReturn.person = $rootScope.permissions.user.name;\n\n        if (angular.isDefined(moneyReturn.subiect)) {\n            $scope.returnId = moneyReturn.id;\n            $scope.moneyReturn = moneyReturn;\n            $scope.moneyReturn.time = new Date($scope.moneyReturn.time);\n        }\n\n        var url = '/api/money-returns/';\n\n        $scope.save = function () {\n            $scope.isLoading = true;\n            $http.post(url, $scope.moneyReturn).\n                    success(function (data) {\n                        if (data.success) {\n                            $uibModalInstance.close(data.data);\n                        } else {\n                            if (typeof data.error === 'object') {\n                                $scope.formErrors = data.error;\n                            } else {\n                                growl.addErrorMessage('Nie udało się dodać zwrotu pieniędzy !');\n                            }\n                        }\n                    }).\n                    finally(function () {\n                        $scope.isLoading = false;\n                    });\n        };\n\n        $scope.cancel = function () {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        $scope.popup = false;\n\n        $scope.dateOptions = {\n            dateDisabled: false,\n            formatYear: 'yy',\n            startingDay: 1,\n        };\n\n        $scope.startDate = function () {\n            $scope.popup = true;\n        };\n\n    }]);","interMap.controller('codeGeneratorController', ['$scope', '$http',\n    function ($scope, $http) {\n\n        var url = '/api/code-generator/';\n\n        $scope.getCodeGeneratorData = function () {\n            return $http.get(url);\n        };\n\n        $scope.html = [];\n        $scope.draft = {\n            product_name: '',\n            product_description: '',\n            product_description_two: '',\n            product_description_three: '',\n            product_image_first: '',\n            product_image_second: '',\n            product_image_third: '',\n            product_image_four: '',\n            product_image_five: '',\n            product_image_six: '',\n            product_image_seven: '',\n            product_image_eight: '',\n            product_image_nine: ''\n        };\n\n        $scope.getCodeGeneratorData()\n                .then(function (response) {\n                    if (response.data.success) {\n                        $scope.templates = response.data.templates;\n                        $scope.template_elements = response.data.template_elements;\n                        $scope.template_htmls = response.data.template_htmls;\n                        $scope.html = angular.copy($scope.template_htmls);\n                    }\n                });\n\n        $scope.generate = function (draft, template) {\n            var html = angular.copy($scope.html[template]);\n            var elements = angular.copy($scope.template_elements[template]);\n            angular.forEach(draft, function (value, key) {\n                angular.forEach(elements, function (v, k) {\n                    if (v.key == key) {\n                        if (value == '') {\n                            value = '';\n                        } else {\n                            value = v.shortcode.replace('[' + key + ']', value);\n                        }\n                        html = html.replace(v.shortcode, value);\n                    }\n                });\n            });\n            $scope.template_htmls[template] = angular.copy(html);\n        };\n    }]);\n"],"sourceRoot":"/source/"}